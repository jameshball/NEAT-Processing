void mutateAddConnection() {
    if (network.size() != inputNodeCount * outputNodeCount) {
      
      
      ArrayList<Node> inputNodes = new ArrayList<Node>();
      ArrayList<Node> outputNodes = new ArrayList<Node>();
      
      for (int i = 0; i < nodes.size(); i++) {
        if (nodes.get(i).nodeType == NodeTypes.INPUT) {
          inputNodes.add(nodes.get(i));
        }
        else if (nodes.get(i).nodeType == NodeTypes.OUTPUT) {
          outputNodes.add(nodes.get(i));
        }
        else {
          inputNodes.add(nodes.get(i));
          outputNodes.add(nodes.get(i));
        }
      }
      
      int inNode = (int)random(0, inputNodes.size() - 1);
      int outNode = (int)random(1, nodes.size());
      
      while (inNode == outNode || connectionExists(inNode, outNode) || nodes.get(outNode - 1).nodeType == NodeTypes.INPUT || nodes.get(inNode - 1).nodeType == NodeTypes.OUTPUT) {
        
        if (inNode == outNode) {
          println("hello");
        }
        
        if (connectionExists(inNode, outNode)) {
          println("hello");
        }
        
        if (nodes.get(outNode - 1).nodeType == NodeTypes.INPUT) {
          println("hello");
        }
        
        if (nodes.get(inNode - 1).nodeType == NodeTypes.OUTPUT) {
          println("hello");
        }
        
        inNode = (int)random(1, nodes.size());
        outNode = (int)random(1, nodes.size());
      }
      
      network.add(new Connection(connectionGenes.returnGene(inNode, outNode), random(-1, 1), true));
    }
  }

  void showBestPlayers() {
    if (playersRendered > 0) {
      if (frameCount - framesSinceLastSort > 200) {
        Arrays.sort(players, new Comparator<Player>() {
          @Override
          public int compare(Player p1, Player p2) {
            int score1 = p1.level.score;
            int score2 = p2.level.score;
            
            if (p1.level.snake.dead) {
              score1 = -1;
            }
            
            if (p2.level.snake.dead) {
              score2 = -1;
            }
            
            return Float.compare(score1, score2);
          }
        });
        
        Collections.reverse(Arrays.asList(players));
        
        framesSinceLastSort = frameCount;
      }
      
      for (int i = 1; i < playersRendered; i++) {
        players[i].show();
        players[i].level.isBest = false;
      }
      
      players[0].level.isBest = true;
      players[0].show();
    }
    
  }